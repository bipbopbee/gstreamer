******************************************************************************/
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <gst/gst.h>
#include <glib.h>
#include "osal_str.h"
#include "hi_common.h"

//lint -e754
//lint -e835 //G_TYPE_INVALID
//lint -e413 //G_STRUCT_OFFSET

//静态目录指的是可能多个模块去创建，第一个模块创建了，后面的模块在调用接口来创建直接返回成功。
//静态目录名:sme.[TAG].PID
#define HI_PROC_MODULE_NAME_MAX_LEN   (16)
#define STATIC_DIR_PREFIX             "sme"         //静态目录不能超多16个字符
#define HI_PROC_ENTRY_NAME_MAX_LEN    (128)         //HI_PROC文件名最大长度
#define PROC_STATUS_BUF_SIZE          (256)         //读取进程信息的buffersize
#define DIR_WITH_PID_BLACK_NAME       "mediaserver" //不加进程号的进程黑名单

typedef struct _GSmeProc            GSmeProc;
typedef struct _GSmeProcClass       GSmeProcClass;
typedef struct _GSmeProcEntry       GSmeProcEntry;
typedef struct _GSmeProcEntryClass  GSmeProcEntryClass;

struct _GSmeProcEntry
{
  GObject           object;                                 //基类
  GSmeProc*         sme_proc;                               //GSmeProc对象
  HI_PROC_ENTRY_S   proc_entry;                             //每个proc的entry对象
  gchar             entry_name[HI_PROC_ENTRY_NAME_MAX_LEN]; //entry_name字符串
};

struct _GSmeProcEntryClass
{
  GObjectClass  object_class;
/*
功能描述：g_signal接口,proc输出函数，GSmeProc实现，调用者通过g_signal_emit_by_name调用。
返回值  ：0：成功，其他失败。
参数    ：object    ：GSmeProcEntry对象指针
          proc_buf  ：透传给HI_PROC的buf参数。
          buf       ：要输出的字符串。
*/
  gint    (*proc_printf)(GObject * object, gpointer proc_buf, const char* buf);
/*
功能描述：g_signal接口,proc获取信息函数，cat /proc/hisi/xxx/xx时GSmeProc调用，调用者实现。
          对entry type为0有效。
返回值  ：0：成功，其他失败。
参数：    object    ：GSmeProcEntry对象指针
          proc_buf  ：透传给proc_printf的buf参数。
*/
  gint    (*proc_get)(GObject* object, gpointer proc_buf);

/*
功能描述：g_signal接口,proc设置函数，echo xxx > /proc/hisi/xxx/xx时GSmeProc调用，调用者实现，
          并在Add Entry之后connect上。
返回值  ：  0：成功，其他失败。
参数    ：object    ：GSmeProcEntry对象指针
          argc      : 命令个数
          argv[]    ：命令字符串数组
          proc_buf  ：透传给proc_printf的buf参数
*/
  gint    (*proc_set)( GObject * object, guint argc,
                    guint8 *argv[],  gpointer proc_buf);
  gpointer  _gst_reserved[GST_PADDING];
};

struct _GSmeProc
{
  GObject   object;
  GMutex    entry_list_mutex; //proc_entry_list锁
  GList*    proc_entry_list;  //SmeProcEntry list
  HI_U32    hi_module_id;     //hi module id
  gchar*    dir;              //目录,[playername].[ID]=dir_tag.dir_id
  guint     dir_id;           //id，默认为G_MAXUINT32，G_MAXUINT32说明为静态proc目录
  gpointer  _gst_reserved[GST_PADDING];
};

struct _GSmeProcClass
{
  GObjectClass  object_class;
/*
功能描述：g_signal接口,增加目录，GSmeProc实现，调用者通过g_signal_emit_by_name调用，
            一个对象 只能创建1个目录。
          当前整个进程必须先创建静态目录才能创建动态目录。
返回值  ：0：成功，其他失败。
参数    ：object  ：GSmeProc对象指针。
          dir_name：静态目录时为目录后缀，静态目录组成sme.dir_name，
                    静态目录可以传入NULL，当为NULL时，自动取PID。
                    动态目录不能传入NULL。
          id      ：静态目录必须传入G_MAXUINT32，动态目录传入对象id，以区分多实例。
*/
  gint    (*add_dir)(GObject* object, const gchar* dir_tag, guint id);
/*
功能描述：g_signal接口,删除目录，GSmeProc实现，调用者通过g_signal_emit_by_name调用。
返回值  ：0：成功，其他失败。
参数    ：object：GSmeProc对象指针。
*/
  gint    (*remove_dir)(GObject * object);
/*
功能描述：g_signal接口,增加proc文件，GSmeProc实现，调用者通过g_signal_emit_by_name调用。
            动态proc文件时，文件名为：entry_name.id，先有目录才有entry，一个目录
            可以创建多个entry，必须要调用remove_entry删除。
返回值  ：返回创建的entry指针，NULL：失败，其他成功。
参数    ：self      ：GSmeProc对象指针。
          entry_tag : 动态proc文件时为文件名前缀，静态proc就是proc文件名，不能为NULL。
          id        ：动态proc时为模块id，作为文件名的后缀，静态proc时id设置为G_MAXUINT32.
*/
  GObject*  (*add_entry)(GObject * object, const gchar* entry_tag, guint id);
/*
功能描述：g_signal接口,删除proc文件，GSmeProc实现，调用者通过g_signal_emit_by_name调用。
返回值  ：NULL：失败，其他成功。
参数    ：object    ：GSmeProc对象指针。
          proc_entry：add_entry创建的entry对象指针.
*/
  gint    (*remove_entry)(GObject * object, GObject* proc_entry);
  gpointer _gst_reserved[GST_PADDING];
};

/* signals */
enum
{
  SIGNAL_ADD_DIR = 0,
  SIGNAL_RM_DIR,
  SIGNAL_ADD_ENTRY,
  SIGNAL_RM_ENTRY,
  SIGNAL_PROC_PRINT,
  SIGNAL_PROC_GET,
  SIGNAL_PROC_SET,
  LAST_SIGNAL
};

static HI_U32  g_himodule_id          = HI_INVALID_MODULE_ID;     //hi module id,HI_PROC对应使用的HI_MODULE
static gchar* g_static_dir            = NULL;                     //静态顶层目录名
static guint  g_static_dir_add_count  = 0;                        //add_dir成功的次数
static GMutex g_mutex;                                            //全局变量锁
static guint  g_sme_proc_signals[LAST_SIGNAL] = { 0 };            //本文件所有signal_id
static GType  g_sme_proc_entry_type = G_TYPE_INVALID;             //sme_entry_type值
static gboolean g_enable_take_pid = FALSE;                        //是否开启目录带上进程号

static GSmeProcClass *      g_parent_class = NULL;
static GSmeProcEntryClass*  g_entry_parent_class = NULL;


static HI_S32
_priv_sme_proc_entry_get(HI_PROC_SHOW_BUFFER_S * pstBuf, HI_VOID *pPrivData);

static HI_S32
_priv_sme_proc_entry_set(HI_PROC_SHOW_BUFFER_S * pstBuf, HI_U32 u32Argc,
  HI_U8 *pu8Argv[], HI_VOID *pPrivData);

#define SEC_Snprintf(dest, size_max, size_count, str_fmt, ...) \
  { \
    V_INT32 i32VOSRes = VOS_Snprintf_S(dest, size_max, size_count,\
      str_fmt, ##__VA_ARGS__); \
    if (E_VOS_STR_ENONE != i32VOSRes){ \
      GST_WARNING("VOS_Snprintf_S failed, i32VOSRes:%d", i32VOSRes);\
    } \
  }

//proc status file format as following:
//Name:   test_sme_dvbpla
//State:  S (sleeping)
//.....

static void _priv_get_proc_name(pid_t pid, gchar *proc_name, guint32 size)
{
  gchar proc_pid_path[PROC_STATUS_BUF_SIZE] = {0,};
  gchar buf[PROC_STATUS_BUF_SIZE]           = {0,};
  gint  fd                                  = 0;
  gchar* tmp_begin                          = NULL;
  gchar* tmp_end                            = NULL;

  SEC_Snprintf(proc_pid_path, sizeof(proc_pid_path),
    sizeof(proc_pid_path) - 1, "/proc/%d/status", pid);

  G_STMT_START{
    fd = open(proc_pid_path, O_RDONLY, S_IRUSR | S_IWUSR);
    if (-1 == fd){
      GST_WARNING("open %s failed!", proc_pid_path);
      break;
    }

    if(read(fd, buf, sizeof(buf) - 1) <= strlen("Name:")){
      GST_WARNING("read %s failed!", proc_pid_path);
      break;
    }
    buf[PROC_STATUS_BUF_SIZE - 1] = (gchar)0;
    tmp_begin = strstr(buf, ":");
    if (!tmp_begin){
      GST_WARNING("get spliter failed");
      break;      
    }
    
    for (tmp_begin++; (glong)tmp_begin < (glong)(&buf[strlen(buf)]); tmp_begin++){
      if(!tmp_begin[0] || (tmp_begin[0] != '\t' && tmp_begin[0] != ' ')){
        break;
      }
    }

    for (tmp_end = tmp_begin; (glong)tmp_end < (glong)(&buf[strlen(buf)]); tmp_end++){
      if (!tmp_end[0] || tmp_end[0] == '\t' || tmp_end[0] == '\n'){
        break;
      }
    }

    tmp_end[0] = '\0';

    SEC_Snprintf(proc_name, size, size > 1 ? size - 1 : 0, "%s", tmp_begin);
    GST_WARNING("proc_name:%s", tmp_begin);
  }G_STMT_END;

  if (fd != -1){
    close(fd);
  }

  return;
}

static void _priv_sme_proc_entry_list_free(GSmeProc* self)
{
  g_mutex_lock(&self->entry_list_mutex);
  if (self->proc_entry_list){
    GList* tmp_list;
 
    GST_WARNING_OBJECT(NULL, "_priv_sme_proc_entry_list_free, self:%p,"
      " proc_entry_list(%p) is not null why?", self, self->proc_entry_list);

    for (tmp_list = self->proc_entry_list; tmp_list; tmp_list = tmp_list->next) {
      GSmeProcEntry* entry = tmp_list->data;

      if (entry){
        g_object_unref(entry);
      }

      tmp_list->data = NULL;
    }

    g_list_free(self->proc_entry_list);
    self->proc_entry_list = NULL;
  }
  g_mutex_unlock(&self->entry_list_mutex);

  return;
}

static gint _priv_sme_proc_add_dir(GObject* object, const gchar* dir_tag, guint id)
{
  gint        ret         = -1;
  pid_t       this_pid    = 0;
  GSmeProc*   self        = (GSmeProc*)object;
  HI_S32      s32error    = HI_SUCCESS;
  guint       dir_len     = 0;
  gchar       himodule_name[HI_PROC_MODULE_NAME_MAX_LEN] = {0,};//hi module name，为sme.[PID]
  gchar       proc_name[PROC_STATUS_BUF_SIZE] = {0,};

  GST_INFO_OBJECT(NULL, "in _priv_sme_proc_add_dir,self:%p, dir_tag:%s, id:%u",
    self, dir_tag?dir_tag:"NULL", id);

  g_mutex_lock(&g_mutex);

  do{
    if (!self){
      GST_WARNING_OBJECT(NULL, "Warning! self is null, failed!");
      break;
    }
    this_pid = getpid();

    if (G_MAXUINT32 == id){
      if (g_static_dir){
        self->hi_module_id = g_himodule_id;
        self->dir = g_static_dir;
        g_static_dir_add_count++;
        ret = 0;
        GST_DEBUG_OBJECT(NULL, "_priv_sme_proc_add_dir,self:%p, already created!", self);
        break;
      }
      SEC_Snprintf(himodule_name, sizeof(himodule_name),
        sizeof(himodule_name) - 1, "%s.%d", STATIC_DIR_PREFIX, this_pid);

      if (dir_tag && strlen(dir_tag)){
        SEC_Snprintf(proc_name, sizeof(proc_name), sizeof(proc_name) - 1, "%s", dir_tag);
      } else {
        _priv_get_proc_name(this_pid, proc_name, sizeof(proc_name));
      }
      dir_len = (guint)(strlen(himodule_name) + strlen(proc_name) + 2);
    } else {
      if (!dir_tag){
        GST_WARNING_OBJECT(NULL, "self:%p, dir_tag is null", self);
        break;
      }

      if (self->dir){
        GST_ERROR_OBJECT(NULL, "self:%p, dir is already exist, only 1 dir for "
          "1 instance, dir:%s", self, self->dir);
        ret = 0;
        break;
      }
      SEC_Snprintf(himodule_name, sizeof(himodule_name), sizeof(himodule_name) - 1, "%d.%s%d",
        this_pid, dir_tag, id);
      _priv_get_proc_name(this_pid, proc_name, sizeof(proc_name));
      dir_len = (guint)(strlen(STATIC_DIR_PREFIX) + strlen(proc_name) + strlen(dir_tag) + 32);
    }
    (void)HI_SYS_Init();
    s32error = HI_MODULE_RegisterByName((const HI_CHAR*)himodule_name, &self->hi_module_id);
    if (HI_SUCCESS != s32error){
      GST_ERROR_OBJECT(NULL, "self:%p, HI_MODULE_RegisterByName failed, "
        "himodule_name:%s, s32error:%#x", self, himodule_name, s32error);

      self->hi_module_id = HI_INVALID_MODULE_ID;
      (void)HI_SYS_DeInit();

      break;
    }

    self->dir = g_malloc(dir_len);
    if (!self->dir){
      GST_ERROR_OBJECT(NULL, "self:%p, g_malloc failed! static dir_len:%d", self, dir_len);
      break;
    }

    if (G_MAXUINT32 == id){
      if (g_enable_take_pid && strcmp(DIR_WITH_PID_BLACK_NAME, proc_name)){
        SEC_Snprintf(self->dir, dir_len, dir_len - 1, "%s.%s.%d", STATIC_DIR_PREFIX,
          proc_name, this_pid);
      } else {
        SEC_Snprintf(self->dir, dir_len, dir_len - 1, "%s.%s", STATIC_DIR_PREFIX,
          proc_name);
      }
      g_static_dir = self->dir;
    } else {
      if (g_enable_take_pid && strcmp(DIR_WITH_PID_BLACK_NAME, proc_name)){
        SEC_Snprintf(self->dir, dir_len, dir_len - 1, "%s.%s.%d.%s.%02d", STATIC_DIR_PREFIX,
          proc_name, this_pid, dir_tag,id);
      } else {
        SEC_Snprintf(self->dir, dir_len, dir_len - 1, "%s.%s.%s.%02d", STATIC_DIR_PREFIX,
          proc_name, dir_tag,id);
      }
    }
    self->dir_id  = id;

    GST_INFO_OBJECT(NULL, "_priv_sme_proc_add_dir,self:%p,himodule_name:%s,"
      " dir:%s, hi_module_id:%#x,id:%#x",
      self, himodule_name, self->dir, self->hi_module_id, id);

    s32error = HI_PROC_AddDir(self->dir);
    if (HI_SUCCESS != s32error){
      GST_ERROR_OBJECT(NULL, "self:%p, HI_PROC_AddDir failed! dir:%s", self, self->dir);
      break;
    }

    if (G_MAXUINT32 == id){
      g_static_dir_add_count++;
      g_himodule_id = self->hi_module_id;
    }
    ret = 0;
  }while(FALSE);

  //add dir 出错，这里要做逆过程
  if (0 != ret && self){
    if (NULL != self->dir){
      g_free(self->dir);
    }

    if (self->hi_module_id != HI_INVALID_MODULE_ID){
        (void)HI_MODULE_UnRegister(self->hi_module_id);
        (void)HI_SYS_DeInit();
        self->hi_module_id = HI_INVALID_MODULE_ID;
    }

    if (G_MAXUINT32 == id){
      g_static_dir  = NULL;
      g_himodule_id = HI_INVALID_MODULE_ID;
      self->dir_id  = G_MAXUINT32;
    } else {
      self->dir_id  = 0;
    }
    self->dir       = NULL;
  }
  g_mutex_unlock(&g_mutex);

  GST_INFO_OBJECT(NULL, "out _priv_sme_proc_add_dir,self:%p, ret:%d, g_static_dir_add_count:%d",
    self, ret, g_static_dir_add_count);

  return ret;

